import csv
import re
from pathlib import Path
from collections import defaultdict
import yaml

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
vault_path = Path(r"C:\Users\stasr\Documents\Obsidian Vault\obsidian-valut")
parent_note_relpath = Path(r"–¢–µ–≥–∏\–ù–∞–≤—ã–∫–∏, –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–∞–±–æ—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è\__–ù–∞–≤—ã–∫–∏, –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–∞–±–æ—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è.md")
allow_dirs = {
    "–¢–µ–≥–∏",
    "_–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
    "_WiKi",
}
max_depth = 5
yaml_stop_keys = {"–¢–∏–ø-–∑–∞–ø–∏—Å–∏"}

value_by = {
    "yaml_key": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "map": {
        "6) –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π üü§": 1.0,
        "5) –ù–∏–∑–∫–∏–π üîµ": 2.0,
        "4) –û–±—ã—á–Ω—ã–π üü¢": 5.0,
        "3) –í–∞–∂–Ω—ã–π üü°": 8.0,
        "2) –û—á–µ–Ω—å –≤–∞–∂–Ω—ã–π üü†": 11.0,
        "1) –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π üî¥": 15.0
    }
}

# ===============================

parent_note_stem = parent_note_relpath.stem
link_pattern = re.compile(r"\[\[([^\[\]|]+)(?:\|[^\]]*)?\]\]")

link_map = defaultdict(set)
note_paths = {}
stop_nodes = set()
yaml_values = {}

for md_file in vault_path.rglob("*.md"):
    rel_path = md_file.relative_to(vault_path)
    if not any(part in allow_dirs for part in rel_path.parts):
        continue

    try:
        content = md_file.read_text(encoding='utf-8')
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª {rel_path} ‚Äî –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        continue

    from_note = md_file.stem
    note_paths[from_note] = rel_path

    # –ü–∞—Ä—Å–∏–º YAML –≤—Ä—É—á–Ω—É—é
    if content.startswith('---'):
        try:
            yaml_text = content.split('---', 2)[1]
            metadata = yaml.safe_load(yaml_text)
            if isinstance(metadata, dict):
                if any(k in metadata for k in yaml_stop_keys):
                    stop_nodes.add(from_note)

                # –ï—Å–ª–∏ value_by –≤–∫–ª—é—á—ë–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if value_by:
                    val = metadata.get(value_by["yaml_key"])
                    yaml_values[from_note] = value_by["map"].get(val, 0.0)
        except Exception:
            pass  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º YAML

    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏
    links = link_pattern.findall(content)
    for to_note in links:
        link_map[to_note].add(from_note)

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø—É—Ç–µ–π
def collect_paths(current, path, depth, results):
    if depth >= max_depth:
        results.append(path)
        return
    if current in stop_nodes:
        results.append(path)
        return
    backlinks = link_map.get(current, [])
    if not backlinks:
        results.append(path)
    else:
        for b in backlinks:
            if b in path:
                continue
            collect_paths(b, path + [b], depth + 1, results)

all_paths = []
collect_paths(parent_note_stem, [parent_note_stem], 0, all_paths)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
output_csv = "link_hierarchy.csv"
with open(output_csv, 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    header = []
    if value_by:
        header.append("Value")
    header += [f"Level {i}" for i in range(max_depth + 1)]
    writer.writerow(header)

    for path in all_paths:
        row = path + [''] * (max_depth + 1 - len(path))
        if value_by:
            last_node = row[-1] or row[-2]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø—É—Å—Ç–æ–π
            value = yaml_values.get(last_node, 0.0)
            writer.writerow([value] + row)
        else:
            writer.writerow(row)

print(f"‚úÖ CSV-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_csv}")
